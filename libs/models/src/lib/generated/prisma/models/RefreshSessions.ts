
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `RefreshSessions` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model RefreshSessions
 * 
 */
export type RefreshSessionsModel = runtime.Types.Result.DefaultSelection<Prisma.$RefreshSessionsPayload>

export type AggregateRefreshSessions = {
  _count: RefreshSessionsCountAggregateOutputType | null
  _min: RefreshSessionsMinAggregateOutputType | null
  _max: RefreshSessionsMaxAggregateOutputType | null
}

export type RefreshSessionsMinAggregateOutputType = {
  id: string | null
  tokenId: string | null
  userId: string | null
  expiresIn: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type RefreshSessionsMaxAggregateOutputType = {
  id: string | null
  tokenId: string | null
  userId: string | null
  expiresIn: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type RefreshSessionsCountAggregateOutputType = {
  id: number
  tokenId: number
  userId: number
  expiresIn: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type RefreshSessionsMinAggregateInputType = {
  id?: true | runtime.Types.Skip
  tokenId?: true | runtime.Types.Skip
  userId?: true | runtime.Types.Skip
  expiresIn?: true | runtime.Types.Skip
  createdAt?: true | runtime.Types.Skip
  updatedAt?: true | runtime.Types.Skip
}

export type RefreshSessionsMaxAggregateInputType = {
  id?: true | runtime.Types.Skip
  tokenId?: true | runtime.Types.Skip
  userId?: true | runtime.Types.Skip
  expiresIn?: true | runtime.Types.Skip
  createdAt?: true | runtime.Types.Skip
  updatedAt?: true | runtime.Types.Skip
}

export type RefreshSessionsCountAggregateInputType = {
  id?: true | runtime.Types.Skip
  tokenId?: true | runtime.Types.Skip
  userId?: true | runtime.Types.Skip
  expiresIn?: true | runtime.Types.Skip
  createdAt?: true | runtime.Types.Skip
  updatedAt?: true | runtime.Types.Skip
  _all?: true | runtime.Types.Skip
}

export type RefreshSessionsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RefreshSessions to aggregate.
   */
  where?: Prisma.RefreshSessionsWhereInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RefreshSessions to fetch.
   */
  orderBy?: Prisma.RefreshSessionsOrderByWithRelationInput | Prisma.RefreshSessionsOrderByWithRelationInput[] | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RefreshSessionsWhereUniqueInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RefreshSessions from the position of the cursor.
   */
  take?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RefreshSessions.
   */
  skip?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned RefreshSessions
  **/
  _count?: true | RefreshSessionsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RefreshSessionsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RefreshSessionsMaxAggregateInputType
}

export type GetRefreshSessionsAggregateType<T extends RefreshSessionsAggregateArgs> = {
      [P in keyof T & keyof AggregateRefreshSessions]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRefreshSessions[P]>
    : Prisma.GetScalarType<T[P], AggregateRefreshSessions[P]>
}




export type RefreshSessionsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RefreshSessionsWhereInput | runtime.Types.Skip
  orderBy?: Prisma.RefreshSessionsOrderByWithAggregationInput | Prisma.RefreshSessionsOrderByWithAggregationInput[] | runtime.Types.Skip
  by: Prisma.RefreshSessionsScalarFieldEnum[] | Prisma.RefreshSessionsScalarFieldEnum
  having?: Prisma.RefreshSessionsScalarWhereWithAggregatesInput | runtime.Types.Skip
  take?: number | runtime.Types.Skip
  skip?: number | runtime.Types.Skip
  _count?: RefreshSessionsCountAggregateInputType | true
  _min?: RefreshSessionsMinAggregateInputType
  _max?: RefreshSessionsMaxAggregateInputType
}

export type RefreshSessionsGroupByOutputType = {
  id: string
  tokenId: string
  userId: string
  expiresIn: Date
  createdAt: Date
  updatedAt: Date
  _count: RefreshSessionsCountAggregateOutputType | null
  _min: RefreshSessionsMinAggregateOutputType | null
  _max: RefreshSessionsMaxAggregateOutputType | null
}

type GetRefreshSessionsGroupByPayload<T extends RefreshSessionsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RefreshSessionsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RefreshSessionsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RefreshSessionsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RefreshSessionsGroupByOutputType[P]>
      }
    >
  > 



export type RefreshSessionsWhereInput = {
  AND?: Prisma.RefreshSessionsWhereInput | Prisma.RefreshSessionsWhereInput[] | runtime.Types.Skip
  OR?: Prisma.RefreshSessionsWhereInput[] | runtime.Types.Skip
  NOT?: Prisma.RefreshSessionsWhereInput | Prisma.RefreshSessionsWhereInput[] | runtime.Types.Skip
  id?: Prisma.StringFilter<"RefreshSessions"> | string | runtime.Types.Skip
  tokenId?: Prisma.StringFilter<"RefreshSessions"> | string | runtime.Types.Skip
  userId?: Prisma.StringFilter<"RefreshSessions"> | string | runtime.Types.Skip
  expiresIn?: Prisma.DateTimeFilter<"RefreshSessions"> | Date | string | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFilter<"RefreshSessions"> | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFilter<"RefreshSessions"> | Date | string | runtime.Types.Skip
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput> | runtime.Types.Skip
}

export type RefreshSessionsOrderByWithRelationInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  tokenId?: Prisma.SortOrder | runtime.Types.Skip
  userId?: Prisma.SortOrder | runtime.Types.Skip
  expiresIn?: Prisma.SortOrder | runtime.Types.Skip
  createdAt?: Prisma.SortOrder | runtime.Types.Skip
  updatedAt?: Prisma.SortOrder | runtime.Types.Skip
  user?: Prisma.UserOrderByWithRelationInput | runtime.Types.Skip
}

export type RefreshSessionsWhereUniqueInput = Prisma.AtLeast<{
  id?: string | runtime.Types.Skip
  tokenId?: string | runtime.Types.Skip
  AND?: Prisma.RefreshSessionsWhereInput | Prisma.RefreshSessionsWhereInput[] | runtime.Types.Skip
  OR?: Prisma.RefreshSessionsWhereInput[] | runtime.Types.Skip
  NOT?: Prisma.RefreshSessionsWhereInput | Prisma.RefreshSessionsWhereInput[] | runtime.Types.Skip
  userId?: Prisma.StringFilter<"RefreshSessions"> | string | runtime.Types.Skip
  expiresIn?: Prisma.DateTimeFilter<"RefreshSessions"> | Date | string | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFilter<"RefreshSessions"> | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFilter<"RefreshSessions"> | Date | string | runtime.Types.Skip
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput> | runtime.Types.Skip
}, "id" | "tokenId">

export type RefreshSessionsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  tokenId?: Prisma.SortOrder | runtime.Types.Skip
  userId?: Prisma.SortOrder | runtime.Types.Skip
  expiresIn?: Prisma.SortOrder | runtime.Types.Skip
  createdAt?: Prisma.SortOrder | runtime.Types.Skip
  updatedAt?: Prisma.SortOrder | runtime.Types.Skip
  _count?: Prisma.RefreshSessionsCountOrderByAggregateInput | runtime.Types.Skip
  _max?: Prisma.RefreshSessionsMaxOrderByAggregateInput | runtime.Types.Skip
  _min?: Prisma.RefreshSessionsMinOrderByAggregateInput | runtime.Types.Skip
}

export type RefreshSessionsScalarWhereWithAggregatesInput = {
  AND?: Prisma.RefreshSessionsScalarWhereWithAggregatesInput | Prisma.RefreshSessionsScalarWhereWithAggregatesInput[] | runtime.Types.Skip
  OR?: Prisma.RefreshSessionsScalarWhereWithAggregatesInput[] | runtime.Types.Skip
  NOT?: Prisma.RefreshSessionsScalarWhereWithAggregatesInput | Prisma.RefreshSessionsScalarWhereWithAggregatesInput[] | runtime.Types.Skip
  id?: Prisma.StringWithAggregatesFilter<"RefreshSessions"> | string | runtime.Types.Skip
  tokenId?: Prisma.StringWithAggregatesFilter<"RefreshSessions"> | string | runtime.Types.Skip
  userId?: Prisma.StringWithAggregatesFilter<"RefreshSessions"> | string | runtime.Types.Skip
  expiresIn?: Prisma.DateTimeWithAggregatesFilter<"RefreshSessions"> | Date | string | runtime.Types.Skip
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"RefreshSessions"> | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"RefreshSessions"> | Date | string | runtime.Types.Skip
}

export type RefreshSessionsCreateInput = {
  id?: string | runtime.Types.Skip
  tokenId: string
  expiresIn: Date | string
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
  user: Prisma.UserCreateNestedOneWithoutRefreshSessionsInput
}

export type RefreshSessionsUncheckedCreateInput = {
  id?: string | runtime.Types.Skip
  tokenId: string
  userId: string
  expiresIn: Date | string
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
}

export type RefreshSessionsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  tokenId?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  expiresIn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  user?: Prisma.UserUpdateOneRequiredWithoutRefreshSessionsNestedInput | runtime.Types.Skip
}

export type RefreshSessionsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  tokenId?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  userId?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  expiresIn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
}

export type RefreshSessionsCreateManyInput = {
  id?: string | runtime.Types.Skip
  tokenId: string
  userId: string
  expiresIn: Date | string
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
}

export type RefreshSessionsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  tokenId?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  expiresIn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
}

export type RefreshSessionsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  tokenId?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  userId?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  expiresIn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
}

export type RefreshSessionsListRelationFilter = {
  every?: Prisma.RefreshSessionsWhereInput | runtime.Types.Skip
  some?: Prisma.RefreshSessionsWhereInput | runtime.Types.Skip
  none?: Prisma.RefreshSessionsWhereInput | runtime.Types.Skip
}

export type RefreshSessionsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder | runtime.Types.Skip
}

export type RefreshSessionsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  tokenId?: Prisma.SortOrder | runtime.Types.Skip
  userId?: Prisma.SortOrder | runtime.Types.Skip
  expiresIn?: Prisma.SortOrder | runtime.Types.Skip
  createdAt?: Prisma.SortOrder | runtime.Types.Skip
  updatedAt?: Prisma.SortOrder | runtime.Types.Skip
}

export type RefreshSessionsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  tokenId?: Prisma.SortOrder | runtime.Types.Skip
  userId?: Prisma.SortOrder | runtime.Types.Skip
  expiresIn?: Prisma.SortOrder | runtime.Types.Skip
  createdAt?: Prisma.SortOrder | runtime.Types.Skip
  updatedAt?: Prisma.SortOrder | runtime.Types.Skip
}

export type RefreshSessionsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  tokenId?: Prisma.SortOrder | runtime.Types.Skip
  userId?: Prisma.SortOrder | runtime.Types.Skip
  expiresIn?: Prisma.SortOrder | runtime.Types.Skip
  createdAt?: Prisma.SortOrder | runtime.Types.Skip
  updatedAt?: Prisma.SortOrder | runtime.Types.Skip
}

export type RefreshSessionsCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.RefreshSessionsCreateWithoutUserInput, Prisma.RefreshSessionsUncheckedCreateWithoutUserInput> | Prisma.RefreshSessionsCreateWithoutUserInput[] | Prisma.RefreshSessionsUncheckedCreateWithoutUserInput[] | runtime.Types.Skip
  connectOrCreate?: Prisma.RefreshSessionsCreateOrConnectWithoutUserInput | Prisma.RefreshSessionsCreateOrConnectWithoutUserInput[] | runtime.Types.Skip
  createMany?: Prisma.RefreshSessionsCreateManyUserInputEnvelope | runtime.Types.Skip
  connect?: Prisma.RefreshSessionsWhereUniqueInput | Prisma.RefreshSessionsWhereUniqueInput[] | runtime.Types.Skip
}

export type RefreshSessionsUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.RefreshSessionsCreateWithoutUserInput, Prisma.RefreshSessionsUncheckedCreateWithoutUserInput> | Prisma.RefreshSessionsCreateWithoutUserInput[] | Prisma.RefreshSessionsUncheckedCreateWithoutUserInput[] | runtime.Types.Skip
  connectOrCreate?: Prisma.RefreshSessionsCreateOrConnectWithoutUserInput | Prisma.RefreshSessionsCreateOrConnectWithoutUserInput[] | runtime.Types.Skip
  createMany?: Prisma.RefreshSessionsCreateManyUserInputEnvelope | runtime.Types.Skip
  connect?: Prisma.RefreshSessionsWhereUniqueInput | Prisma.RefreshSessionsWhereUniqueInput[] | runtime.Types.Skip
}

export type RefreshSessionsUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.RefreshSessionsCreateWithoutUserInput, Prisma.RefreshSessionsUncheckedCreateWithoutUserInput> | Prisma.RefreshSessionsCreateWithoutUserInput[] | Prisma.RefreshSessionsUncheckedCreateWithoutUserInput[] | runtime.Types.Skip
  connectOrCreate?: Prisma.RefreshSessionsCreateOrConnectWithoutUserInput | Prisma.RefreshSessionsCreateOrConnectWithoutUserInput[] | runtime.Types.Skip
  upsert?: Prisma.RefreshSessionsUpsertWithWhereUniqueWithoutUserInput | Prisma.RefreshSessionsUpsertWithWhereUniqueWithoutUserInput[] | runtime.Types.Skip
  createMany?: Prisma.RefreshSessionsCreateManyUserInputEnvelope | runtime.Types.Skip
  set?: Prisma.RefreshSessionsWhereUniqueInput | Prisma.RefreshSessionsWhereUniqueInput[] | runtime.Types.Skip
  disconnect?: Prisma.RefreshSessionsWhereUniqueInput | Prisma.RefreshSessionsWhereUniqueInput[] | runtime.Types.Skip
  delete?: Prisma.RefreshSessionsWhereUniqueInput | Prisma.RefreshSessionsWhereUniqueInput[] | runtime.Types.Skip
  connect?: Prisma.RefreshSessionsWhereUniqueInput | Prisma.RefreshSessionsWhereUniqueInput[] | runtime.Types.Skip
  update?: Prisma.RefreshSessionsUpdateWithWhereUniqueWithoutUserInput | Prisma.RefreshSessionsUpdateWithWhereUniqueWithoutUserInput[] | runtime.Types.Skip
  updateMany?: Prisma.RefreshSessionsUpdateManyWithWhereWithoutUserInput | Prisma.RefreshSessionsUpdateManyWithWhereWithoutUserInput[] | runtime.Types.Skip
  deleteMany?: Prisma.RefreshSessionsScalarWhereInput | Prisma.RefreshSessionsScalarWhereInput[] | runtime.Types.Skip
}

export type RefreshSessionsUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.RefreshSessionsCreateWithoutUserInput, Prisma.RefreshSessionsUncheckedCreateWithoutUserInput> | Prisma.RefreshSessionsCreateWithoutUserInput[] | Prisma.RefreshSessionsUncheckedCreateWithoutUserInput[] | runtime.Types.Skip
  connectOrCreate?: Prisma.RefreshSessionsCreateOrConnectWithoutUserInput | Prisma.RefreshSessionsCreateOrConnectWithoutUserInput[] | runtime.Types.Skip
  upsert?: Prisma.RefreshSessionsUpsertWithWhereUniqueWithoutUserInput | Prisma.RefreshSessionsUpsertWithWhereUniqueWithoutUserInput[] | runtime.Types.Skip
  createMany?: Prisma.RefreshSessionsCreateManyUserInputEnvelope | runtime.Types.Skip
  set?: Prisma.RefreshSessionsWhereUniqueInput | Prisma.RefreshSessionsWhereUniqueInput[] | runtime.Types.Skip
  disconnect?: Prisma.RefreshSessionsWhereUniqueInput | Prisma.RefreshSessionsWhereUniqueInput[] | runtime.Types.Skip
  delete?: Prisma.RefreshSessionsWhereUniqueInput | Prisma.RefreshSessionsWhereUniqueInput[] | runtime.Types.Skip
  connect?: Prisma.RefreshSessionsWhereUniqueInput | Prisma.RefreshSessionsWhereUniqueInput[] | runtime.Types.Skip
  update?: Prisma.RefreshSessionsUpdateWithWhereUniqueWithoutUserInput | Prisma.RefreshSessionsUpdateWithWhereUniqueWithoutUserInput[] | runtime.Types.Skip
  updateMany?: Prisma.RefreshSessionsUpdateManyWithWhereWithoutUserInput | Prisma.RefreshSessionsUpdateManyWithWhereWithoutUserInput[] | runtime.Types.Skip
  deleteMany?: Prisma.RefreshSessionsScalarWhereInput | Prisma.RefreshSessionsScalarWhereInput[] | runtime.Types.Skip
}

export type RefreshSessionsCreateWithoutUserInput = {
  id?: string | runtime.Types.Skip
  tokenId: string
  expiresIn: Date | string
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
}

export type RefreshSessionsUncheckedCreateWithoutUserInput = {
  id?: string | runtime.Types.Skip
  tokenId: string
  expiresIn: Date | string
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
}

export type RefreshSessionsCreateOrConnectWithoutUserInput = {
  where: Prisma.RefreshSessionsWhereUniqueInput
  create: Prisma.XOR<Prisma.RefreshSessionsCreateWithoutUserInput, Prisma.RefreshSessionsUncheckedCreateWithoutUserInput>
}

export type RefreshSessionsCreateManyUserInputEnvelope = {
  data: Prisma.RefreshSessionsCreateManyUserInput | Prisma.RefreshSessionsCreateManyUserInput[]
  skipDuplicates?: boolean | runtime.Types.Skip
}

export type RefreshSessionsUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.RefreshSessionsWhereUniqueInput
  update: Prisma.XOR<Prisma.RefreshSessionsUpdateWithoutUserInput, Prisma.RefreshSessionsUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.RefreshSessionsCreateWithoutUserInput, Prisma.RefreshSessionsUncheckedCreateWithoutUserInput>
}

export type RefreshSessionsUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.RefreshSessionsWhereUniqueInput
  data: Prisma.XOR<Prisma.RefreshSessionsUpdateWithoutUserInput, Prisma.RefreshSessionsUncheckedUpdateWithoutUserInput>
}

export type RefreshSessionsUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.RefreshSessionsScalarWhereInput
  data: Prisma.XOR<Prisma.RefreshSessionsUpdateManyMutationInput, Prisma.RefreshSessionsUncheckedUpdateManyWithoutUserInput>
}

export type RefreshSessionsScalarWhereInput = {
  AND?: Prisma.RefreshSessionsScalarWhereInput | Prisma.RefreshSessionsScalarWhereInput[] | runtime.Types.Skip
  OR?: Prisma.RefreshSessionsScalarWhereInput[] | runtime.Types.Skip
  NOT?: Prisma.RefreshSessionsScalarWhereInput | Prisma.RefreshSessionsScalarWhereInput[] | runtime.Types.Skip
  id?: Prisma.StringFilter<"RefreshSessions"> | string | runtime.Types.Skip
  tokenId?: Prisma.StringFilter<"RefreshSessions"> | string | runtime.Types.Skip
  userId?: Prisma.StringFilter<"RefreshSessions"> | string | runtime.Types.Skip
  expiresIn?: Prisma.DateTimeFilter<"RefreshSessions"> | Date | string | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFilter<"RefreshSessions"> | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFilter<"RefreshSessions"> | Date | string | runtime.Types.Skip
}

export type RefreshSessionsCreateManyUserInput = {
  id?: string | runtime.Types.Skip
  tokenId: string
  expiresIn: Date | string
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
}

export type RefreshSessionsUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  tokenId?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  expiresIn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
}

export type RefreshSessionsUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  tokenId?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  expiresIn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
}

export type RefreshSessionsUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  tokenId?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  expiresIn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
}



export type RefreshSessionsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean | runtime.Types.Skip
  tokenId?: boolean | runtime.Types.Skip
  userId?: boolean | runtime.Types.Skip
  expiresIn?: boolean | runtime.Types.Skip
  createdAt?: boolean | runtime.Types.Skip
  updatedAt?: boolean | runtime.Types.Skip
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs> | runtime.Types.Skip
}, ExtArgs["result"]["refreshSessions"]>

export type RefreshSessionsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean | runtime.Types.Skip
  tokenId?: boolean | runtime.Types.Skip
  userId?: boolean | runtime.Types.Skip
  expiresIn?: boolean | runtime.Types.Skip
  createdAt?: boolean | runtime.Types.Skip
  updatedAt?: boolean | runtime.Types.Skip
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs> | runtime.Types.Skip
}, ExtArgs["result"]["refreshSessions"]>

export type RefreshSessionsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean | runtime.Types.Skip
  tokenId?: boolean | runtime.Types.Skip
  userId?: boolean | runtime.Types.Skip
  expiresIn?: boolean | runtime.Types.Skip
  createdAt?: boolean | runtime.Types.Skip
  updatedAt?: boolean | runtime.Types.Skip
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs> | runtime.Types.Skip
}, ExtArgs["result"]["refreshSessions"]>

export type RefreshSessionsSelectScalar = {
  id?: boolean | runtime.Types.Skip
  tokenId?: boolean | runtime.Types.Skip
  userId?: boolean | runtime.Types.Skip
  expiresIn?: boolean | runtime.Types.Skip
  createdAt?: boolean | runtime.Types.Skip
  updatedAt?: boolean | runtime.Types.Skip
}

export type RefreshSessionsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "tokenId" | "userId" | "expiresIn" | "createdAt" | "updatedAt", ExtArgs["result"]["refreshSessions"], runtime.Types.Skip>
export type RefreshSessionsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs> | runtime.Types.Skip
}
export type RefreshSessionsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs> | runtime.Types.Skip
}
export type RefreshSessionsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs> | runtime.Types.Skip
}

export type $RefreshSessionsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "RefreshSessions"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    tokenId: string
    userId: string
    expiresIn: Date
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["refreshSessions"]>
  composites: {}
}

export type RefreshSessionsGetPayload<S extends boolean | null | undefined | RefreshSessionsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RefreshSessionsPayload, S>

export type RefreshSessionsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RefreshSessionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RefreshSessionsCountAggregateInputType | true
  }

export interface RefreshSessionsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefreshSessions'], meta: { name: 'RefreshSessions' } }
  /**
   * Find zero or one RefreshSessions that matches the filter.
   * @param {RefreshSessionsFindUniqueArgs} args - Arguments to find a RefreshSessions
   * @example
   * // Get one RefreshSessions
   * const refreshSessions = await prisma.refreshSessions.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RefreshSessionsFindUniqueArgs>(args: Prisma.SelectSubset<T, RefreshSessionsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RefreshSessionsClient<runtime.Types.Result.GetResult<Prisma.$RefreshSessionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one RefreshSessions that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RefreshSessionsFindUniqueOrThrowArgs} args - Arguments to find a RefreshSessions
   * @example
   * // Get one RefreshSessions
   * const refreshSessions = await prisma.refreshSessions.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RefreshSessionsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RefreshSessionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RefreshSessionsClient<runtime.Types.Result.GetResult<Prisma.$RefreshSessionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RefreshSessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefreshSessionsFindFirstArgs} args - Arguments to find a RefreshSessions
   * @example
   * // Get one RefreshSessions
   * const refreshSessions = await prisma.refreshSessions.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RefreshSessionsFindFirstArgs>(args?: Prisma.SelectSubset<T, RefreshSessionsFindFirstArgs<ExtArgs>>): Prisma.Prisma__RefreshSessionsClient<runtime.Types.Result.GetResult<Prisma.$RefreshSessionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RefreshSessions that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefreshSessionsFindFirstOrThrowArgs} args - Arguments to find a RefreshSessions
   * @example
   * // Get one RefreshSessions
   * const refreshSessions = await prisma.refreshSessions.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RefreshSessionsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RefreshSessionsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RefreshSessionsClient<runtime.Types.Result.GetResult<Prisma.$RefreshSessionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more RefreshSessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefreshSessionsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RefreshSessions
   * const refreshSessions = await prisma.refreshSessions.findMany()
   * 
   * // Get first 10 RefreshSessions
   * const refreshSessions = await prisma.refreshSessions.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const refreshSessionsWithIdOnly = await prisma.refreshSessions.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RefreshSessionsFindManyArgs>(args?: Prisma.SelectSubset<T, RefreshSessionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RefreshSessionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a RefreshSessions.
   * @param {RefreshSessionsCreateArgs} args - Arguments to create a RefreshSessions.
   * @example
   * // Create one RefreshSessions
   * const RefreshSessions = await prisma.refreshSessions.create({
   *   data: {
   *     // ... data to create a RefreshSessions
   *   }
   * })
   * 
   */
  create<T extends RefreshSessionsCreateArgs>(args: Prisma.SelectSubset<T, RefreshSessionsCreateArgs<ExtArgs>>): Prisma.Prisma__RefreshSessionsClient<runtime.Types.Result.GetResult<Prisma.$RefreshSessionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many RefreshSessions.
   * @param {RefreshSessionsCreateManyArgs} args - Arguments to create many RefreshSessions.
   * @example
   * // Create many RefreshSessions
   * const refreshSessions = await prisma.refreshSessions.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RefreshSessionsCreateManyArgs>(args?: Prisma.SelectSubset<T, RefreshSessionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many RefreshSessions and returns the data saved in the database.
   * @param {RefreshSessionsCreateManyAndReturnArgs} args - Arguments to create many RefreshSessions.
   * @example
   * // Create many RefreshSessions
   * const refreshSessions = await prisma.refreshSessions.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many RefreshSessions and only return the `id`
   * const refreshSessionsWithIdOnly = await prisma.refreshSessions.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RefreshSessionsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RefreshSessionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RefreshSessionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a RefreshSessions.
   * @param {RefreshSessionsDeleteArgs} args - Arguments to delete one RefreshSessions.
   * @example
   * // Delete one RefreshSessions
   * const RefreshSessions = await prisma.refreshSessions.delete({
   *   where: {
   *     // ... filter to delete one RefreshSessions
   *   }
   * })
   * 
   */
  delete<T extends RefreshSessionsDeleteArgs>(args: Prisma.SelectSubset<T, RefreshSessionsDeleteArgs<ExtArgs>>): Prisma.Prisma__RefreshSessionsClient<runtime.Types.Result.GetResult<Prisma.$RefreshSessionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one RefreshSessions.
   * @param {RefreshSessionsUpdateArgs} args - Arguments to update one RefreshSessions.
   * @example
   * // Update one RefreshSessions
   * const refreshSessions = await prisma.refreshSessions.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RefreshSessionsUpdateArgs>(args: Prisma.SelectSubset<T, RefreshSessionsUpdateArgs<ExtArgs>>): Prisma.Prisma__RefreshSessionsClient<runtime.Types.Result.GetResult<Prisma.$RefreshSessionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more RefreshSessions.
   * @param {RefreshSessionsDeleteManyArgs} args - Arguments to filter RefreshSessions to delete.
   * @example
   * // Delete a few RefreshSessions
   * const { count } = await prisma.refreshSessions.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RefreshSessionsDeleteManyArgs>(args?: Prisma.SelectSubset<T, RefreshSessionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RefreshSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefreshSessionsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RefreshSessions
   * const refreshSessions = await prisma.refreshSessions.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RefreshSessionsUpdateManyArgs>(args: Prisma.SelectSubset<T, RefreshSessionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RefreshSessions and returns the data updated in the database.
   * @param {RefreshSessionsUpdateManyAndReturnArgs} args - Arguments to update many RefreshSessions.
   * @example
   * // Update many RefreshSessions
   * const refreshSessions = await prisma.refreshSessions.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more RefreshSessions and only return the `id`
   * const refreshSessionsWithIdOnly = await prisma.refreshSessions.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RefreshSessionsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RefreshSessionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RefreshSessionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one RefreshSessions.
   * @param {RefreshSessionsUpsertArgs} args - Arguments to update or create a RefreshSessions.
   * @example
   * // Update or create a RefreshSessions
   * const refreshSessions = await prisma.refreshSessions.upsert({
   *   create: {
   *     // ... data to create a RefreshSessions
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RefreshSessions we want to update
   *   }
   * })
   */
  upsert<T extends RefreshSessionsUpsertArgs>(args: Prisma.SelectSubset<T, RefreshSessionsUpsertArgs<ExtArgs>>): Prisma.Prisma__RefreshSessionsClient<runtime.Types.Result.GetResult<Prisma.$RefreshSessionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of RefreshSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefreshSessionsCountArgs} args - Arguments to filter RefreshSessions to count.
   * @example
   * // Count the number of RefreshSessions
   * const count = await prisma.refreshSessions.count({
   *   where: {
   *     // ... the filter for the RefreshSessions we want to count
   *   }
   * })
  **/
  count<T extends RefreshSessionsCountArgs>(
    args?: Prisma.Subset<T, RefreshSessionsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RefreshSessionsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a RefreshSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefreshSessionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RefreshSessionsAggregateArgs>(args: Prisma.Subset<T, RefreshSessionsAggregateArgs>): Prisma.PrismaPromise<GetRefreshSessionsAggregateType<T>>

  /**
   * Group by RefreshSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefreshSessionsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RefreshSessionsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RefreshSessionsGroupByArgs['orderBy'] }
      : { orderBy?: RefreshSessionsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RefreshSessionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefreshSessionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the RefreshSessions model
 */
readonly fields: RefreshSessionsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for RefreshSessions.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RefreshSessionsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the RefreshSessions model
 */
export interface RefreshSessionsFieldRefs {
  readonly id: Prisma.FieldRef<"RefreshSessions", 'String'>
  readonly tokenId: Prisma.FieldRef<"RefreshSessions", 'String'>
  readonly userId: Prisma.FieldRef<"RefreshSessions", 'String'>
  readonly expiresIn: Prisma.FieldRef<"RefreshSessions", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"RefreshSessions", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"RefreshSessions", 'DateTime'>
}
    

// Custom InputTypes
/**
 * RefreshSessions findUnique
 */
export type RefreshSessionsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshSessions
   */
  select?: Prisma.RefreshSessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshSessions
   */
  omit?: Prisma.RefreshSessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshSessionsInclude<ExtArgs> | null
  /**
   * Filter, which RefreshSessions to fetch.
   */
  where: Prisma.RefreshSessionsWhereUniqueInput
}

/**
 * RefreshSessions findUniqueOrThrow
 */
export type RefreshSessionsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshSessions
   */
  select?: Prisma.RefreshSessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshSessions
   */
  omit?: Prisma.RefreshSessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshSessionsInclude<ExtArgs> | null
  /**
   * Filter, which RefreshSessions to fetch.
   */
  where: Prisma.RefreshSessionsWhereUniqueInput
}

/**
 * RefreshSessions findFirst
 */
export type RefreshSessionsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshSessions
   */
  select?: Prisma.RefreshSessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshSessions
   */
  omit?: Prisma.RefreshSessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshSessionsInclude<ExtArgs> | null
  /**
   * Filter, which RefreshSessions to fetch.
   */
  where?: Prisma.RefreshSessionsWhereInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RefreshSessions to fetch.
   */
  orderBy?: Prisma.RefreshSessionsOrderByWithRelationInput | Prisma.RefreshSessionsOrderByWithRelationInput[] | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RefreshSessions.
   */
  cursor?: Prisma.RefreshSessionsWhereUniqueInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RefreshSessions from the position of the cursor.
   */
  take?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RefreshSessions.
   */
  skip?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RefreshSessions.
   */
  distinct?: Prisma.RefreshSessionsScalarFieldEnum | Prisma.RefreshSessionsScalarFieldEnum[] | runtime.Types.Skip
}

/**
 * RefreshSessions findFirstOrThrow
 */
export type RefreshSessionsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshSessions
   */
  select?: Prisma.RefreshSessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshSessions
   */
  omit?: Prisma.RefreshSessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshSessionsInclude<ExtArgs> | null
  /**
   * Filter, which RefreshSessions to fetch.
   */
  where?: Prisma.RefreshSessionsWhereInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RefreshSessions to fetch.
   */
  orderBy?: Prisma.RefreshSessionsOrderByWithRelationInput | Prisma.RefreshSessionsOrderByWithRelationInput[] | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RefreshSessions.
   */
  cursor?: Prisma.RefreshSessionsWhereUniqueInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RefreshSessions from the position of the cursor.
   */
  take?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RefreshSessions.
   */
  skip?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RefreshSessions.
   */
  distinct?: Prisma.RefreshSessionsScalarFieldEnum | Prisma.RefreshSessionsScalarFieldEnum[] | runtime.Types.Skip
}

/**
 * RefreshSessions findMany
 */
export type RefreshSessionsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshSessions
   */
  select?: Prisma.RefreshSessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshSessions
   */
  omit?: Prisma.RefreshSessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshSessionsInclude<ExtArgs> | null
  /**
   * Filter, which RefreshSessions to fetch.
   */
  where?: Prisma.RefreshSessionsWhereInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RefreshSessions to fetch.
   */
  orderBy?: Prisma.RefreshSessionsOrderByWithRelationInput | Prisma.RefreshSessionsOrderByWithRelationInput[] | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing RefreshSessions.
   */
  cursor?: Prisma.RefreshSessionsWhereUniqueInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RefreshSessions from the position of the cursor.
   */
  take?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RefreshSessions.
   */
  skip?: number | runtime.Types.Skip
  distinct?: Prisma.RefreshSessionsScalarFieldEnum | Prisma.RefreshSessionsScalarFieldEnum[] | runtime.Types.Skip
}

/**
 * RefreshSessions create
 */
export type RefreshSessionsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshSessions
   */
  select?: Prisma.RefreshSessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshSessions
   */
  omit?: Prisma.RefreshSessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshSessionsInclude<ExtArgs> | null
  /**
   * The data needed to create a RefreshSessions.
   */
  data: Prisma.XOR<Prisma.RefreshSessionsCreateInput, Prisma.RefreshSessionsUncheckedCreateInput>
}

/**
 * RefreshSessions createMany
 */
export type RefreshSessionsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many RefreshSessions.
   */
  data: Prisma.RefreshSessionsCreateManyInput | Prisma.RefreshSessionsCreateManyInput[]
  skipDuplicates?: boolean | runtime.Types.Skip
}

/**
 * RefreshSessions createManyAndReturn
 */
export type RefreshSessionsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshSessions
   */
  select?: Prisma.RefreshSessionsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshSessions
   */
  omit?: Prisma.RefreshSessionsOmit<ExtArgs> | null
  /**
   * The data used to create many RefreshSessions.
   */
  data: Prisma.RefreshSessionsCreateManyInput | Prisma.RefreshSessionsCreateManyInput[]
  skipDuplicates?: boolean | runtime.Types.Skip
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshSessionsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * RefreshSessions update
 */
export type RefreshSessionsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshSessions
   */
  select?: Prisma.RefreshSessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshSessions
   */
  omit?: Prisma.RefreshSessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshSessionsInclude<ExtArgs> | null
  /**
   * The data needed to update a RefreshSessions.
   */
  data: Prisma.XOR<Prisma.RefreshSessionsUpdateInput, Prisma.RefreshSessionsUncheckedUpdateInput>
  /**
   * Choose, which RefreshSessions to update.
   */
  where: Prisma.RefreshSessionsWhereUniqueInput
}

/**
 * RefreshSessions updateMany
 */
export type RefreshSessionsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update RefreshSessions.
   */
  data: Prisma.XOR<Prisma.RefreshSessionsUpdateManyMutationInput, Prisma.RefreshSessionsUncheckedUpdateManyInput>
  /**
   * Filter which RefreshSessions to update
   */
  where?: Prisma.RefreshSessionsWhereInput | runtime.Types.Skip
  /**
   * Limit how many RefreshSessions to update.
   */
  limit?: number | runtime.Types.Skip
}

/**
 * RefreshSessions updateManyAndReturn
 */
export type RefreshSessionsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshSessions
   */
  select?: Prisma.RefreshSessionsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshSessions
   */
  omit?: Prisma.RefreshSessionsOmit<ExtArgs> | null
  /**
   * The data used to update RefreshSessions.
   */
  data: Prisma.XOR<Prisma.RefreshSessionsUpdateManyMutationInput, Prisma.RefreshSessionsUncheckedUpdateManyInput>
  /**
   * Filter which RefreshSessions to update
   */
  where?: Prisma.RefreshSessionsWhereInput | runtime.Types.Skip
  /**
   * Limit how many RefreshSessions to update.
   */
  limit?: number | runtime.Types.Skip
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshSessionsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * RefreshSessions upsert
 */
export type RefreshSessionsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshSessions
   */
  select?: Prisma.RefreshSessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshSessions
   */
  omit?: Prisma.RefreshSessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshSessionsInclude<ExtArgs> | null
  /**
   * The filter to search for the RefreshSessions to update in case it exists.
   */
  where: Prisma.RefreshSessionsWhereUniqueInput
  /**
   * In case the RefreshSessions found by the `where` argument doesn't exist, create a new RefreshSessions with this data.
   */
  create: Prisma.XOR<Prisma.RefreshSessionsCreateInput, Prisma.RefreshSessionsUncheckedCreateInput>
  /**
   * In case the RefreshSessions was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RefreshSessionsUpdateInput, Prisma.RefreshSessionsUncheckedUpdateInput>
}

/**
 * RefreshSessions delete
 */
export type RefreshSessionsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshSessions
   */
  select?: Prisma.RefreshSessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshSessions
   */
  omit?: Prisma.RefreshSessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshSessionsInclude<ExtArgs> | null
  /**
   * Filter which RefreshSessions to delete.
   */
  where: Prisma.RefreshSessionsWhereUniqueInput
}

/**
 * RefreshSessions deleteMany
 */
export type RefreshSessionsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RefreshSessions to delete
   */
  where?: Prisma.RefreshSessionsWhereInput | runtime.Types.Skip
  /**
   * Limit how many RefreshSessions to delete.
   */
  limit?: number | runtime.Types.Skip
}

/**
 * RefreshSessions without action
 */
export type RefreshSessionsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshSessions
   */
  select?: Prisma.RefreshSessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshSessions
   */
  omit?: Prisma.RefreshSessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshSessionsInclude<ExtArgs> | null
}
