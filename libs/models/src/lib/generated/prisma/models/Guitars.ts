
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Guitars` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Guitars
 * 
 */
export type GuitarsModel = runtime.Types.Result.DefaultSelection<Prisma.$GuitarsPayload>

export type AggregateGuitars = {
  _count: GuitarsCountAggregateOutputType | null
  _avg: GuitarsAvgAggregateOutputType | null
  _sum: GuitarsSumAggregateOutputType | null
  _min: GuitarsMinAggregateOutputType | null
  _max: GuitarsMaxAggregateOutputType | null
}

export type GuitarsAvgAggregateOutputType = {
  price: number | null
}

export type GuitarsSumAggregateOutputType = {
  price: number | null
}

export type GuitarsMinAggregateOutputType = {
  id: string | null
  title: string | null
  image: string | null
  date: Date | null
  type: $Enums.GuitarType | null
  stringCount: $Enums.GuitarStrings | null
  article: string | null
  description: string | null
  price: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type GuitarsMaxAggregateOutputType = {
  id: string | null
  title: string | null
  image: string | null
  date: Date | null
  type: $Enums.GuitarType | null
  stringCount: $Enums.GuitarStrings | null
  article: string | null
  description: string | null
  price: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type GuitarsCountAggregateOutputType = {
  id: number
  title: number
  image: number
  date: number
  type: number
  stringCount: number
  article: number
  description: number
  price: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type GuitarsAvgAggregateInputType = {
  price?: true | runtime.Types.Skip
}

export type GuitarsSumAggregateInputType = {
  price?: true | runtime.Types.Skip
}

export type GuitarsMinAggregateInputType = {
  id?: true | runtime.Types.Skip
  title?: true | runtime.Types.Skip
  image?: true | runtime.Types.Skip
  date?: true | runtime.Types.Skip
  type?: true | runtime.Types.Skip
  stringCount?: true | runtime.Types.Skip
  article?: true | runtime.Types.Skip
  description?: true | runtime.Types.Skip
  price?: true | runtime.Types.Skip
  createdAt?: true | runtime.Types.Skip
  updatedAt?: true | runtime.Types.Skip
}

export type GuitarsMaxAggregateInputType = {
  id?: true | runtime.Types.Skip
  title?: true | runtime.Types.Skip
  image?: true | runtime.Types.Skip
  date?: true | runtime.Types.Skip
  type?: true | runtime.Types.Skip
  stringCount?: true | runtime.Types.Skip
  article?: true | runtime.Types.Skip
  description?: true | runtime.Types.Skip
  price?: true | runtime.Types.Skip
  createdAt?: true | runtime.Types.Skip
  updatedAt?: true | runtime.Types.Skip
}

export type GuitarsCountAggregateInputType = {
  id?: true | runtime.Types.Skip
  title?: true | runtime.Types.Skip
  image?: true | runtime.Types.Skip
  date?: true | runtime.Types.Skip
  type?: true | runtime.Types.Skip
  stringCount?: true | runtime.Types.Skip
  article?: true | runtime.Types.Skip
  description?: true | runtime.Types.Skip
  price?: true | runtime.Types.Skip
  createdAt?: true | runtime.Types.Skip
  updatedAt?: true | runtime.Types.Skip
  _all?: true | runtime.Types.Skip
}

export type GuitarsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Guitars to aggregate.
   */
  where?: Prisma.GuitarsWhereInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Guitars to fetch.
   */
  orderBy?: Prisma.GuitarsOrderByWithRelationInput | Prisma.GuitarsOrderByWithRelationInput[] | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GuitarsWhereUniqueInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Guitars from the position of the cursor.
   */
  take?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Guitars.
   */
  skip?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Guitars
  **/
  _count?: true | GuitarsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: GuitarsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: GuitarsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GuitarsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GuitarsMaxAggregateInputType
}

export type GetGuitarsAggregateType<T extends GuitarsAggregateArgs> = {
      [P in keyof T & keyof AggregateGuitars]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGuitars[P]>
    : Prisma.GetScalarType<T[P], AggregateGuitars[P]>
}




export type GuitarsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GuitarsWhereInput | runtime.Types.Skip
  orderBy?: Prisma.GuitarsOrderByWithAggregationInput | Prisma.GuitarsOrderByWithAggregationInput[] | runtime.Types.Skip
  by: Prisma.GuitarsScalarFieldEnum[] | Prisma.GuitarsScalarFieldEnum
  having?: Prisma.GuitarsScalarWhereWithAggregatesInput | runtime.Types.Skip
  take?: number | runtime.Types.Skip
  skip?: number | runtime.Types.Skip
  _count?: GuitarsCountAggregateInputType | true
  _avg?: GuitarsAvgAggregateInputType
  _sum?: GuitarsSumAggregateInputType
  _min?: GuitarsMinAggregateInputType
  _max?: GuitarsMaxAggregateInputType
}

export type GuitarsGroupByOutputType = {
  id: string
  title: string
  image: string
  date: Date
  type: $Enums.GuitarType
  stringCount: $Enums.GuitarStrings
  article: string
  description: string
  price: number
  createdAt: Date
  updatedAt: Date
  _count: GuitarsCountAggregateOutputType | null
  _avg: GuitarsAvgAggregateOutputType | null
  _sum: GuitarsSumAggregateOutputType | null
  _min: GuitarsMinAggregateOutputType | null
  _max: GuitarsMaxAggregateOutputType | null
}

type GetGuitarsGroupByPayload<T extends GuitarsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GuitarsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GuitarsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GuitarsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GuitarsGroupByOutputType[P]>
      }
    >
  > 



export type GuitarsWhereInput = {
  AND?: Prisma.GuitarsWhereInput | Prisma.GuitarsWhereInput[] | runtime.Types.Skip
  OR?: Prisma.GuitarsWhereInput[] | runtime.Types.Skip
  NOT?: Prisma.GuitarsWhereInput | Prisma.GuitarsWhereInput[] | runtime.Types.Skip
  id?: Prisma.StringFilter<"Guitars"> | string | runtime.Types.Skip
  title?: Prisma.StringFilter<"Guitars"> | string | runtime.Types.Skip
  image?: Prisma.StringFilter<"Guitars"> | string | runtime.Types.Skip
  date?: Prisma.DateTimeFilter<"Guitars"> | Date | string | runtime.Types.Skip
  type?: Prisma.EnumGuitarTypeFilter<"Guitars"> | $Enums.GuitarType | runtime.Types.Skip
  stringCount?: Prisma.EnumGuitarStringsFilter<"Guitars"> | $Enums.GuitarStrings | runtime.Types.Skip
  article?: Prisma.StringFilter<"Guitars"> | string | runtime.Types.Skip
  description?: Prisma.StringFilter<"Guitars"> | string | runtime.Types.Skip
  price?: Prisma.IntFilter<"Guitars"> | number | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFilter<"Guitars"> | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFilter<"Guitars"> | Date | string | runtime.Types.Skip
}

export type GuitarsOrderByWithRelationInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  title?: Prisma.SortOrder | runtime.Types.Skip
  image?: Prisma.SortOrder | runtime.Types.Skip
  date?: Prisma.SortOrder | runtime.Types.Skip
  type?: Prisma.SortOrder | runtime.Types.Skip
  stringCount?: Prisma.SortOrder | runtime.Types.Skip
  article?: Prisma.SortOrder | runtime.Types.Skip
  description?: Prisma.SortOrder | runtime.Types.Skip
  price?: Prisma.SortOrder | runtime.Types.Skip
  createdAt?: Prisma.SortOrder | runtime.Types.Skip
  updatedAt?: Prisma.SortOrder | runtime.Types.Skip
}

export type GuitarsWhereUniqueInput = Prisma.AtLeast<{
  id?: string | runtime.Types.Skip
  AND?: Prisma.GuitarsWhereInput | Prisma.GuitarsWhereInput[] | runtime.Types.Skip
  OR?: Prisma.GuitarsWhereInput[] | runtime.Types.Skip
  NOT?: Prisma.GuitarsWhereInput | Prisma.GuitarsWhereInput[] | runtime.Types.Skip
  title?: Prisma.StringFilter<"Guitars"> | string | runtime.Types.Skip
  image?: Prisma.StringFilter<"Guitars"> | string | runtime.Types.Skip
  date?: Prisma.DateTimeFilter<"Guitars"> | Date | string | runtime.Types.Skip
  type?: Prisma.EnumGuitarTypeFilter<"Guitars"> | $Enums.GuitarType | runtime.Types.Skip
  stringCount?: Prisma.EnumGuitarStringsFilter<"Guitars"> | $Enums.GuitarStrings | runtime.Types.Skip
  article?: Prisma.StringFilter<"Guitars"> | string | runtime.Types.Skip
  description?: Prisma.StringFilter<"Guitars"> | string | runtime.Types.Skip
  price?: Prisma.IntFilter<"Guitars"> | number | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFilter<"Guitars"> | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFilter<"Guitars"> | Date | string | runtime.Types.Skip
}, "id">

export type GuitarsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  title?: Prisma.SortOrder | runtime.Types.Skip
  image?: Prisma.SortOrder | runtime.Types.Skip
  date?: Prisma.SortOrder | runtime.Types.Skip
  type?: Prisma.SortOrder | runtime.Types.Skip
  stringCount?: Prisma.SortOrder | runtime.Types.Skip
  article?: Prisma.SortOrder | runtime.Types.Skip
  description?: Prisma.SortOrder | runtime.Types.Skip
  price?: Prisma.SortOrder | runtime.Types.Skip
  createdAt?: Prisma.SortOrder | runtime.Types.Skip
  updatedAt?: Prisma.SortOrder | runtime.Types.Skip
  _count?: Prisma.GuitarsCountOrderByAggregateInput | runtime.Types.Skip
  _avg?: Prisma.GuitarsAvgOrderByAggregateInput | runtime.Types.Skip
  _max?: Prisma.GuitarsMaxOrderByAggregateInput | runtime.Types.Skip
  _min?: Prisma.GuitarsMinOrderByAggregateInput | runtime.Types.Skip
  _sum?: Prisma.GuitarsSumOrderByAggregateInput | runtime.Types.Skip
}

export type GuitarsScalarWhereWithAggregatesInput = {
  AND?: Prisma.GuitarsScalarWhereWithAggregatesInput | Prisma.GuitarsScalarWhereWithAggregatesInput[] | runtime.Types.Skip
  OR?: Prisma.GuitarsScalarWhereWithAggregatesInput[] | runtime.Types.Skip
  NOT?: Prisma.GuitarsScalarWhereWithAggregatesInput | Prisma.GuitarsScalarWhereWithAggregatesInput[] | runtime.Types.Skip
  id?: Prisma.StringWithAggregatesFilter<"Guitars"> | string | runtime.Types.Skip
  title?: Prisma.StringWithAggregatesFilter<"Guitars"> | string | runtime.Types.Skip
  image?: Prisma.StringWithAggregatesFilter<"Guitars"> | string | runtime.Types.Skip
  date?: Prisma.DateTimeWithAggregatesFilter<"Guitars"> | Date | string | runtime.Types.Skip
  type?: Prisma.EnumGuitarTypeWithAggregatesFilter<"Guitars"> | $Enums.GuitarType | runtime.Types.Skip
  stringCount?: Prisma.EnumGuitarStringsWithAggregatesFilter<"Guitars"> | $Enums.GuitarStrings | runtime.Types.Skip
  article?: Prisma.StringWithAggregatesFilter<"Guitars"> | string | runtime.Types.Skip
  description?: Prisma.StringWithAggregatesFilter<"Guitars"> | string | runtime.Types.Skip
  price?: Prisma.IntWithAggregatesFilter<"Guitars"> | number | runtime.Types.Skip
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Guitars"> | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Guitars"> | Date | string | runtime.Types.Skip
}

export type GuitarsCreateInput = {
  id?: string | runtime.Types.Skip
  title: string
  image: string
  date?: Date | string | runtime.Types.Skip
  type: $Enums.GuitarType
  stringCount: $Enums.GuitarStrings
  article: string
  description: string
  price: number
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
}

export type GuitarsUncheckedCreateInput = {
  id?: string | runtime.Types.Skip
  title: string
  image: string
  date?: Date | string | runtime.Types.Skip
  type: $Enums.GuitarType
  stringCount: $Enums.GuitarStrings
  article: string
  description: string
  price: number
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
}

export type GuitarsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  title?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  image?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  type?: Prisma.EnumGuitarTypeFieldUpdateOperationsInput | $Enums.GuitarType | runtime.Types.Skip
  stringCount?: Prisma.EnumGuitarStringsFieldUpdateOperationsInput | $Enums.GuitarStrings | runtime.Types.Skip
  article?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  description?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  price?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
}

export type GuitarsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  title?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  image?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  type?: Prisma.EnumGuitarTypeFieldUpdateOperationsInput | $Enums.GuitarType | runtime.Types.Skip
  stringCount?: Prisma.EnumGuitarStringsFieldUpdateOperationsInput | $Enums.GuitarStrings | runtime.Types.Skip
  article?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  description?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  price?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
}

export type GuitarsCreateManyInput = {
  id?: string | runtime.Types.Skip
  title: string
  image: string
  date?: Date | string | runtime.Types.Skip
  type: $Enums.GuitarType
  stringCount: $Enums.GuitarStrings
  article: string
  description: string
  price: number
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
}

export type GuitarsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  title?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  image?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  type?: Prisma.EnumGuitarTypeFieldUpdateOperationsInput | $Enums.GuitarType | runtime.Types.Skip
  stringCount?: Prisma.EnumGuitarStringsFieldUpdateOperationsInput | $Enums.GuitarStrings | runtime.Types.Skip
  article?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  description?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  price?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
}

export type GuitarsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  title?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  image?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  type?: Prisma.EnumGuitarTypeFieldUpdateOperationsInput | $Enums.GuitarType | runtime.Types.Skip
  stringCount?: Prisma.EnumGuitarStringsFieldUpdateOperationsInput | $Enums.GuitarStrings | runtime.Types.Skip
  article?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  description?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  price?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
}

export type GuitarsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  title?: Prisma.SortOrder | runtime.Types.Skip
  image?: Prisma.SortOrder | runtime.Types.Skip
  date?: Prisma.SortOrder | runtime.Types.Skip
  type?: Prisma.SortOrder | runtime.Types.Skip
  stringCount?: Prisma.SortOrder | runtime.Types.Skip
  article?: Prisma.SortOrder | runtime.Types.Skip
  description?: Prisma.SortOrder | runtime.Types.Skip
  price?: Prisma.SortOrder | runtime.Types.Skip
  createdAt?: Prisma.SortOrder | runtime.Types.Skip
  updatedAt?: Prisma.SortOrder | runtime.Types.Skip
}

export type GuitarsAvgOrderByAggregateInput = {
  price?: Prisma.SortOrder | runtime.Types.Skip
}

export type GuitarsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  title?: Prisma.SortOrder | runtime.Types.Skip
  image?: Prisma.SortOrder | runtime.Types.Skip
  date?: Prisma.SortOrder | runtime.Types.Skip
  type?: Prisma.SortOrder | runtime.Types.Skip
  stringCount?: Prisma.SortOrder | runtime.Types.Skip
  article?: Prisma.SortOrder | runtime.Types.Skip
  description?: Prisma.SortOrder | runtime.Types.Skip
  price?: Prisma.SortOrder | runtime.Types.Skip
  createdAt?: Prisma.SortOrder | runtime.Types.Skip
  updatedAt?: Prisma.SortOrder | runtime.Types.Skip
}

export type GuitarsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  title?: Prisma.SortOrder | runtime.Types.Skip
  image?: Prisma.SortOrder | runtime.Types.Skip
  date?: Prisma.SortOrder | runtime.Types.Skip
  type?: Prisma.SortOrder | runtime.Types.Skip
  stringCount?: Prisma.SortOrder | runtime.Types.Skip
  article?: Prisma.SortOrder | runtime.Types.Skip
  description?: Prisma.SortOrder | runtime.Types.Skip
  price?: Prisma.SortOrder | runtime.Types.Skip
  createdAt?: Prisma.SortOrder | runtime.Types.Skip
  updatedAt?: Prisma.SortOrder | runtime.Types.Skip
}

export type GuitarsSumOrderByAggregateInput = {
  price?: Prisma.SortOrder | runtime.Types.Skip
}

export type StringFieldUpdateOperationsInput = {
  set?: string | runtime.Types.Skip
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string | runtime.Types.Skip
}

export type EnumGuitarTypeFieldUpdateOperationsInput = {
  set?: $Enums.GuitarType | runtime.Types.Skip
}

export type EnumGuitarStringsFieldUpdateOperationsInput = {
  set?: $Enums.GuitarStrings | runtime.Types.Skip
}

export type IntFieldUpdateOperationsInput = {
  set?: number | runtime.Types.Skip
  increment?: number | runtime.Types.Skip
  decrement?: number | runtime.Types.Skip
  multiply?: number | runtime.Types.Skip
  divide?: number | runtime.Types.Skip
}



export type GuitarsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean | runtime.Types.Skip
  title?: boolean | runtime.Types.Skip
  image?: boolean | runtime.Types.Skip
  date?: boolean | runtime.Types.Skip
  type?: boolean | runtime.Types.Skip
  stringCount?: boolean | runtime.Types.Skip
  article?: boolean | runtime.Types.Skip
  description?: boolean | runtime.Types.Skip
  price?: boolean | runtime.Types.Skip
  createdAt?: boolean | runtime.Types.Skip
  updatedAt?: boolean | runtime.Types.Skip
}, ExtArgs["result"]["guitars"]>

export type GuitarsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean | runtime.Types.Skip
  title?: boolean | runtime.Types.Skip
  image?: boolean | runtime.Types.Skip
  date?: boolean | runtime.Types.Skip
  type?: boolean | runtime.Types.Skip
  stringCount?: boolean | runtime.Types.Skip
  article?: boolean | runtime.Types.Skip
  description?: boolean | runtime.Types.Skip
  price?: boolean | runtime.Types.Skip
  createdAt?: boolean | runtime.Types.Skip
  updatedAt?: boolean | runtime.Types.Skip
}, ExtArgs["result"]["guitars"]>

export type GuitarsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean | runtime.Types.Skip
  title?: boolean | runtime.Types.Skip
  image?: boolean | runtime.Types.Skip
  date?: boolean | runtime.Types.Skip
  type?: boolean | runtime.Types.Skip
  stringCount?: boolean | runtime.Types.Skip
  article?: boolean | runtime.Types.Skip
  description?: boolean | runtime.Types.Skip
  price?: boolean | runtime.Types.Skip
  createdAt?: boolean | runtime.Types.Skip
  updatedAt?: boolean | runtime.Types.Skip
}, ExtArgs["result"]["guitars"]>

export type GuitarsSelectScalar = {
  id?: boolean | runtime.Types.Skip
  title?: boolean | runtime.Types.Skip
  image?: boolean | runtime.Types.Skip
  date?: boolean | runtime.Types.Skip
  type?: boolean | runtime.Types.Skip
  stringCount?: boolean | runtime.Types.Skip
  article?: boolean | runtime.Types.Skip
  description?: boolean | runtime.Types.Skip
  price?: boolean | runtime.Types.Skip
  createdAt?: boolean | runtime.Types.Skip
  updatedAt?: boolean | runtime.Types.Skip
}

export type GuitarsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "image" | "date" | "type" | "stringCount" | "article" | "description" | "price" | "createdAt" | "updatedAt", ExtArgs["result"]["guitars"], runtime.Types.Skip>

export type $GuitarsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Guitars"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    image: string
    date: Date
    type: $Enums.GuitarType
    stringCount: $Enums.GuitarStrings
    article: string
    description: string
    price: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["guitars"]>
  composites: {}
}

export type GuitarsGetPayload<S extends boolean | null | undefined | GuitarsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GuitarsPayload, S>

export type GuitarsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GuitarsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GuitarsCountAggregateInputType | true
  }

export interface GuitarsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Guitars'], meta: { name: 'Guitars' } }
  /**
   * Find zero or one Guitars that matches the filter.
   * @param {GuitarsFindUniqueArgs} args - Arguments to find a Guitars
   * @example
   * // Get one Guitars
   * const guitars = await prisma.guitars.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GuitarsFindUniqueArgs>(args: Prisma.SelectSubset<T, GuitarsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GuitarsClient<runtime.Types.Result.GetResult<Prisma.$GuitarsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Guitars that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GuitarsFindUniqueOrThrowArgs} args - Arguments to find a Guitars
   * @example
   * // Get one Guitars
   * const guitars = await prisma.guitars.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GuitarsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GuitarsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GuitarsClient<runtime.Types.Result.GetResult<Prisma.$GuitarsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Guitars that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GuitarsFindFirstArgs} args - Arguments to find a Guitars
   * @example
   * // Get one Guitars
   * const guitars = await prisma.guitars.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GuitarsFindFirstArgs>(args?: Prisma.SelectSubset<T, GuitarsFindFirstArgs<ExtArgs>>): Prisma.Prisma__GuitarsClient<runtime.Types.Result.GetResult<Prisma.$GuitarsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Guitars that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GuitarsFindFirstOrThrowArgs} args - Arguments to find a Guitars
   * @example
   * // Get one Guitars
   * const guitars = await prisma.guitars.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GuitarsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GuitarsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GuitarsClient<runtime.Types.Result.GetResult<Prisma.$GuitarsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Guitars that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GuitarsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Guitars
   * const guitars = await prisma.guitars.findMany()
   * 
   * // Get first 10 Guitars
   * const guitars = await prisma.guitars.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const guitarsWithIdOnly = await prisma.guitars.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GuitarsFindManyArgs>(args?: Prisma.SelectSubset<T, GuitarsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GuitarsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Guitars.
   * @param {GuitarsCreateArgs} args - Arguments to create a Guitars.
   * @example
   * // Create one Guitars
   * const Guitars = await prisma.guitars.create({
   *   data: {
   *     // ... data to create a Guitars
   *   }
   * })
   * 
   */
  create<T extends GuitarsCreateArgs>(args: Prisma.SelectSubset<T, GuitarsCreateArgs<ExtArgs>>): Prisma.Prisma__GuitarsClient<runtime.Types.Result.GetResult<Prisma.$GuitarsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Guitars.
   * @param {GuitarsCreateManyArgs} args - Arguments to create many Guitars.
   * @example
   * // Create many Guitars
   * const guitars = await prisma.guitars.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GuitarsCreateManyArgs>(args?: Prisma.SelectSubset<T, GuitarsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Guitars and returns the data saved in the database.
   * @param {GuitarsCreateManyAndReturnArgs} args - Arguments to create many Guitars.
   * @example
   * // Create many Guitars
   * const guitars = await prisma.guitars.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Guitars and only return the `id`
   * const guitarsWithIdOnly = await prisma.guitars.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GuitarsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GuitarsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GuitarsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Guitars.
   * @param {GuitarsDeleteArgs} args - Arguments to delete one Guitars.
   * @example
   * // Delete one Guitars
   * const Guitars = await prisma.guitars.delete({
   *   where: {
   *     // ... filter to delete one Guitars
   *   }
   * })
   * 
   */
  delete<T extends GuitarsDeleteArgs>(args: Prisma.SelectSubset<T, GuitarsDeleteArgs<ExtArgs>>): Prisma.Prisma__GuitarsClient<runtime.Types.Result.GetResult<Prisma.$GuitarsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Guitars.
   * @param {GuitarsUpdateArgs} args - Arguments to update one Guitars.
   * @example
   * // Update one Guitars
   * const guitars = await prisma.guitars.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GuitarsUpdateArgs>(args: Prisma.SelectSubset<T, GuitarsUpdateArgs<ExtArgs>>): Prisma.Prisma__GuitarsClient<runtime.Types.Result.GetResult<Prisma.$GuitarsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Guitars.
   * @param {GuitarsDeleteManyArgs} args - Arguments to filter Guitars to delete.
   * @example
   * // Delete a few Guitars
   * const { count } = await prisma.guitars.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GuitarsDeleteManyArgs>(args?: Prisma.SelectSubset<T, GuitarsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Guitars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GuitarsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Guitars
   * const guitars = await prisma.guitars.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GuitarsUpdateManyArgs>(args: Prisma.SelectSubset<T, GuitarsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Guitars and returns the data updated in the database.
   * @param {GuitarsUpdateManyAndReturnArgs} args - Arguments to update many Guitars.
   * @example
   * // Update many Guitars
   * const guitars = await prisma.guitars.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Guitars and only return the `id`
   * const guitarsWithIdOnly = await prisma.guitars.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GuitarsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GuitarsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GuitarsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Guitars.
   * @param {GuitarsUpsertArgs} args - Arguments to update or create a Guitars.
   * @example
   * // Update or create a Guitars
   * const guitars = await prisma.guitars.upsert({
   *   create: {
   *     // ... data to create a Guitars
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Guitars we want to update
   *   }
   * })
   */
  upsert<T extends GuitarsUpsertArgs>(args: Prisma.SelectSubset<T, GuitarsUpsertArgs<ExtArgs>>): Prisma.Prisma__GuitarsClient<runtime.Types.Result.GetResult<Prisma.$GuitarsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Guitars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GuitarsCountArgs} args - Arguments to filter Guitars to count.
   * @example
   * // Count the number of Guitars
   * const count = await prisma.guitars.count({
   *   where: {
   *     // ... the filter for the Guitars we want to count
   *   }
   * })
  **/
  count<T extends GuitarsCountArgs>(
    args?: Prisma.Subset<T, GuitarsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GuitarsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Guitars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GuitarsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GuitarsAggregateArgs>(args: Prisma.Subset<T, GuitarsAggregateArgs>): Prisma.PrismaPromise<GetGuitarsAggregateType<T>>

  /**
   * Group by Guitars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GuitarsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GuitarsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GuitarsGroupByArgs['orderBy'] }
      : { orderBy?: GuitarsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GuitarsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuitarsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Guitars model
 */
readonly fields: GuitarsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Guitars.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GuitarsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Guitars model
 */
export interface GuitarsFieldRefs {
  readonly id: Prisma.FieldRef<"Guitars", 'String'>
  readonly title: Prisma.FieldRef<"Guitars", 'String'>
  readonly image: Prisma.FieldRef<"Guitars", 'String'>
  readonly date: Prisma.FieldRef<"Guitars", 'DateTime'>
  readonly type: Prisma.FieldRef<"Guitars", 'GuitarType'>
  readonly stringCount: Prisma.FieldRef<"Guitars", 'GuitarStrings'>
  readonly article: Prisma.FieldRef<"Guitars", 'String'>
  readonly description: Prisma.FieldRef<"Guitars", 'String'>
  readonly price: Prisma.FieldRef<"Guitars", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Guitars", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Guitars", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Guitars findUnique
 */
export type GuitarsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Guitars
   */
  select?: Prisma.GuitarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Guitars
   */
  omit?: Prisma.GuitarsOmit<ExtArgs> | null
  /**
   * Filter, which Guitars to fetch.
   */
  where: Prisma.GuitarsWhereUniqueInput
}

/**
 * Guitars findUniqueOrThrow
 */
export type GuitarsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Guitars
   */
  select?: Prisma.GuitarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Guitars
   */
  omit?: Prisma.GuitarsOmit<ExtArgs> | null
  /**
   * Filter, which Guitars to fetch.
   */
  where: Prisma.GuitarsWhereUniqueInput
}

/**
 * Guitars findFirst
 */
export type GuitarsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Guitars
   */
  select?: Prisma.GuitarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Guitars
   */
  omit?: Prisma.GuitarsOmit<ExtArgs> | null
  /**
   * Filter, which Guitars to fetch.
   */
  where?: Prisma.GuitarsWhereInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Guitars to fetch.
   */
  orderBy?: Prisma.GuitarsOrderByWithRelationInput | Prisma.GuitarsOrderByWithRelationInput[] | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Guitars.
   */
  cursor?: Prisma.GuitarsWhereUniqueInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Guitars from the position of the cursor.
   */
  take?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Guitars.
   */
  skip?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Guitars.
   */
  distinct?: Prisma.GuitarsScalarFieldEnum | Prisma.GuitarsScalarFieldEnum[] | runtime.Types.Skip
}

/**
 * Guitars findFirstOrThrow
 */
export type GuitarsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Guitars
   */
  select?: Prisma.GuitarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Guitars
   */
  omit?: Prisma.GuitarsOmit<ExtArgs> | null
  /**
   * Filter, which Guitars to fetch.
   */
  where?: Prisma.GuitarsWhereInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Guitars to fetch.
   */
  orderBy?: Prisma.GuitarsOrderByWithRelationInput | Prisma.GuitarsOrderByWithRelationInput[] | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Guitars.
   */
  cursor?: Prisma.GuitarsWhereUniqueInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Guitars from the position of the cursor.
   */
  take?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Guitars.
   */
  skip?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Guitars.
   */
  distinct?: Prisma.GuitarsScalarFieldEnum | Prisma.GuitarsScalarFieldEnum[] | runtime.Types.Skip
}

/**
 * Guitars findMany
 */
export type GuitarsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Guitars
   */
  select?: Prisma.GuitarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Guitars
   */
  omit?: Prisma.GuitarsOmit<ExtArgs> | null
  /**
   * Filter, which Guitars to fetch.
   */
  where?: Prisma.GuitarsWhereInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Guitars to fetch.
   */
  orderBy?: Prisma.GuitarsOrderByWithRelationInput | Prisma.GuitarsOrderByWithRelationInput[] | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Guitars.
   */
  cursor?: Prisma.GuitarsWhereUniqueInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Guitars from the position of the cursor.
   */
  take?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Guitars.
   */
  skip?: number | runtime.Types.Skip
  distinct?: Prisma.GuitarsScalarFieldEnum | Prisma.GuitarsScalarFieldEnum[] | runtime.Types.Skip
}

/**
 * Guitars create
 */
export type GuitarsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Guitars
   */
  select?: Prisma.GuitarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Guitars
   */
  omit?: Prisma.GuitarsOmit<ExtArgs> | null
  /**
   * The data needed to create a Guitars.
   */
  data: Prisma.XOR<Prisma.GuitarsCreateInput, Prisma.GuitarsUncheckedCreateInput>
}

/**
 * Guitars createMany
 */
export type GuitarsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Guitars.
   */
  data: Prisma.GuitarsCreateManyInput | Prisma.GuitarsCreateManyInput[]
  skipDuplicates?: boolean | runtime.Types.Skip
}

/**
 * Guitars createManyAndReturn
 */
export type GuitarsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Guitars
   */
  select?: Prisma.GuitarsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Guitars
   */
  omit?: Prisma.GuitarsOmit<ExtArgs> | null
  /**
   * The data used to create many Guitars.
   */
  data: Prisma.GuitarsCreateManyInput | Prisma.GuitarsCreateManyInput[]
  skipDuplicates?: boolean | runtime.Types.Skip
}

/**
 * Guitars update
 */
export type GuitarsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Guitars
   */
  select?: Prisma.GuitarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Guitars
   */
  omit?: Prisma.GuitarsOmit<ExtArgs> | null
  /**
   * The data needed to update a Guitars.
   */
  data: Prisma.XOR<Prisma.GuitarsUpdateInput, Prisma.GuitarsUncheckedUpdateInput>
  /**
   * Choose, which Guitars to update.
   */
  where: Prisma.GuitarsWhereUniqueInput
}

/**
 * Guitars updateMany
 */
export type GuitarsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Guitars.
   */
  data: Prisma.XOR<Prisma.GuitarsUpdateManyMutationInput, Prisma.GuitarsUncheckedUpdateManyInput>
  /**
   * Filter which Guitars to update
   */
  where?: Prisma.GuitarsWhereInput | runtime.Types.Skip
  /**
   * Limit how many Guitars to update.
   */
  limit?: number | runtime.Types.Skip
}

/**
 * Guitars updateManyAndReturn
 */
export type GuitarsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Guitars
   */
  select?: Prisma.GuitarsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Guitars
   */
  omit?: Prisma.GuitarsOmit<ExtArgs> | null
  /**
   * The data used to update Guitars.
   */
  data: Prisma.XOR<Prisma.GuitarsUpdateManyMutationInput, Prisma.GuitarsUncheckedUpdateManyInput>
  /**
   * Filter which Guitars to update
   */
  where?: Prisma.GuitarsWhereInput | runtime.Types.Skip
  /**
   * Limit how many Guitars to update.
   */
  limit?: number | runtime.Types.Skip
}

/**
 * Guitars upsert
 */
export type GuitarsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Guitars
   */
  select?: Prisma.GuitarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Guitars
   */
  omit?: Prisma.GuitarsOmit<ExtArgs> | null
  /**
   * The filter to search for the Guitars to update in case it exists.
   */
  where: Prisma.GuitarsWhereUniqueInput
  /**
   * In case the Guitars found by the `where` argument doesn't exist, create a new Guitars with this data.
   */
  create: Prisma.XOR<Prisma.GuitarsCreateInput, Prisma.GuitarsUncheckedCreateInput>
  /**
   * In case the Guitars was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GuitarsUpdateInput, Prisma.GuitarsUncheckedUpdateInput>
}

/**
 * Guitars delete
 */
export type GuitarsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Guitars
   */
  select?: Prisma.GuitarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Guitars
   */
  omit?: Prisma.GuitarsOmit<ExtArgs> | null
  /**
   * Filter which Guitars to delete.
   */
  where: Prisma.GuitarsWhereUniqueInput
}

/**
 * Guitars deleteMany
 */
export type GuitarsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Guitars to delete
   */
  where?: Prisma.GuitarsWhereInput | runtime.Types.Skip
  /**
   * Limit how many Guitars to delete.
   */
  limit?: number | runtime.Types.Skip
}

/**
 * Guitars without action
 */
export type GuitarsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Guitars
   */
  select?: Prisma.GuitarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Guitars
   */
  omit?: Prisma.GuitarsOmit<ExtArgs> | null
}
